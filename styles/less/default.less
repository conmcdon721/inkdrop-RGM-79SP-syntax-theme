@import "./colors";

.editor {

  .CodeMirror {
    // Background color of main window
    background-color: @sniper00;
  }
  .CodeMirror-scroll, .CodeMirror-dialog {
    // Color of otherwise un-styled text
    color: @sniper03;
  }
  .CodeMirror-gutters {
    // Gutter to the left
    background-color: @sniper01;
    border-right: 1px solid rgba(255, 255, 255, 0.1);
  }
  .CodeMirror-linenumber {
    // Line numbers in the gutter
    color: @sniper03;
  }
  .CodeMirror-selected {
    // Selected text i.e. text the cursor was dragged over.
    background-color: @sniper07;
  }
  .CodeMirror-focused .CodeMirror-selected {
    // Selected text i.e. text the cursor was dragged over when you
    // click outside of the editor.
    background-color: @sniper07;
  }
  .CodeMirror-cursor {
    // The cursor
    border-left: 1px solid @sniper07;
  }
  .CodeMirror-matchingbracket,
  .CodeMirror-matchingtag {
    // When you position your cursor next to a tag/bracket and the
    // corresponding ending tag/bracket is highlighted
    background: rgba(0, 0, 0, 0.1) !important;
    color: @sniper06 !important;
    border-bottom: 1px solid @sniper06 !important;
  }
  /* Removed this chunk because I don't use code-fold

  .CodeMirror-foldgutter-open:after {
    // Those little arrows in the gutter
    color: @sniper01;
  }
  .CodeMirror-foldgutter-folded:after {
    // The arrows after you collapse code
    color: @sniper01;
  }
  .CodeMirror.over-gutter,
  .CodeMirror-activeline {
    .CodeMirror-foldgutter-open:after {
      // Arrows when hovering on the gutter
      color: @sniper03;
    }
  }
  .CodeMirror-foldmarker {
    // The [...] marking collapsed code
    border-color: @sniper02;
    background-color: @sniper03;
    color: @sniper04;
  }
  
  */
  .CodeMirror .CodeMirror-linewidget img.inline-widget {
    background: rgba(0,0,0,0.1);
  }
  .cm-searching {
    // Ctrl + F results AND Search bar results.
    background-color: @sniper08;
    color: @sniper03 !important;
  }

  /* All 'dem swatches */

  .CodeMirror {
    .cm-url {
      color: @sniper05;
    }
    .cm-atom,
    .cm-formatting-list.cm-variable-3,
    .cm-string,
    .cm-string-2,
    .cm-hr {
      color: @sniper02;
    }
    .cm-number,
    .cm-attribute,
    .cm-plus {
      color: @sniper06;
    }
    .cm-def,
    .cm-property {
      color: @sniper05;
    }
    .cm-variable {
      color: @sniper02;
    }
    .cm-keyword,
    .cm-formatting-list.cm-variable-2,
    .cm-operator,
    .cm-meta,
    .cm-bracket {
      color: @sniper03;
    }
    .cm-comment {
      color: white;
      font-style: italic;
    }
    .cm-error,
    .cm-minus {
      color: @sniper04;
    }
    .cm-formatting-header {
      opacity: 0.3;
    }
    .cm-header {
      color: @sniper02;
    }
    .cm-link {
      color: @sniper05;
      text-underline-position: under;
    }
    .cm-rangeinfo {
      color: @sniper02;
    }
    .cm-builtin {
      color: @sniper02;
    }
    .cm-qualifier,
    .cm-tag {
      color: @sniper04;
    }
    .cm-quote {
      color: @sniper08;
      font-style: italic;
    }
    .cm-whitespace::before {
      color: @sniper01;
      opacity: 0.4;
    }
    .cm-formatting-quote, .cm-formatting-strong, .cm-formatting-em {
      opacity: 0.6;
    }
    .cm-strong {
      color: white;
    }
    .cm-em {
      color: @sniper02;
    }

    // carriage return
    .CodeMirror-code > div > pre > span::after, .CodeMirror-line > span::after {
      color: @sniper06;
    }

    .cm-inline-code {
      background: rgba(0, 0, 0, 0.1);
      color: @sniper02;
    }

    .gfm-codeblock-bg.CodeMirror-linebackground {
      background: rgba(0, 0, 0, 0.1);
    }

    .cm-table-sep, .table-row.table-row-1 {
      color: @sniper05;
    }
  }

  /* Active Line Highlight support */
  .CodeMirror-activeline-background, .CodeMirror-activeline-gutter {
    background-color: fade(@sniper08, 10%) !important;
  }
}